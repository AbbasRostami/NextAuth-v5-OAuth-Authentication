import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST(request: Request) {
  try {
    const { email, password } = await request.json();

    if (!email || !password) {
      return NextResponse.json({ error: "┘Д╪╖┘Б╪з┘Л ╪к┘Е╪з┘Е ┘Б█М┘Д╪п┘З╪з ╪▒╪з ┘╛╪▒ ┌й┘Ж█М╪п." }, { status: 400 });
    }

    if (!process.env.JWT_SECRET) {
      console.error("ЁЯЪи JWT_SECRET ╪к┘Ж╪╕█М┘Е ┘Ж╪┤╪п┘З ╪з╪│╪к.");
      return NextResponse.json({ error: "┘Е╪┤┌й┘Д ╪з╪н╪▒╪з╪▓ ┘З┘И█М╪к. ┘Д╪╖┘Б╪з┘Л ╪и╪╣╪п╪з┘Л ╪з┘Е╪к╪н╪з┘Ж ┌й┘Ж█М╪п." }, { status: 500 });
    }

    // █М╪з┘Б╪к┘Ж ┌й╪з╪▒╪и╪▒ ╪п╪▒ ╪п█М╪к╪з╪и█М╪│
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return NextResponse.json({ error: "╪з█М┘Е█М┘Д █М╪з ╪▒┘Е╪▓ ╪╣╪и┘И╪▒ ┘Ж╪з╪п╪▒╪│╪к ╪з╪│╪к." }, { status: 401 });
    }

    // ╪и╪▒╪▒╪│█М ╪╡╪н╪к ╪▒┘Е╪▓ ╪╣╪и┘И╪▒
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return NextResponse.json({ error: "╪з█М┘Е█М┘Д █М╪з ╪▒┘Е╪▓ ╪╣╪и┘И╪▒ ┘Ж╪з╪п╪▒╪│╪к ╪з╪│╪к." }, { status: 401 });
    }

    // ╪з█М╪м╪з╪п ╪к┘И┌й┘Ж JWT
    const accessToken = jwt.sign(
      { id: user.id, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "24h" }
    );

    return NextResponse.json({ message: "┘И╪▒┘И╪п ┘Е┘И┘Б┘В", accessToken, id: user.id, email: user.email }, { status: 200 });
  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error("тЪая╕П ╪о╪╖╪з█М ╪│╪▒┘И╪▒:", error.message);
    }
    return NextResponse.json({ error: "╪о╪╖╪з█М█М ╪▒╪о ╪п╪з╪п┘З ╪з╪│╪к." }, { status: 500 });
  }
}
